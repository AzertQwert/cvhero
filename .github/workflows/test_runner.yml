name: test_runner
on: 
  pull_request: 
    branches: [main, dev]
  workflow_call:
  workflow_dispatch:
  

env:
  MINCOVER: '0'

    
jobs:
  run_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']
        
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: install dependencies
        run: | 
          python -m pip install --upgrade pip
          pip install pytest coveralls
          pip install -r requirements.txt
          
      - name: run tests
        run: |
          # echo testing with min coverage: $OLDCOVER
          # pytest --cov=cvhero --cov-fail-under=$OLDCOVER cv_tests > coverage.txt
          
          coverage run --source=cvhero -m pytest cv_tests
          coverage lcov -o coverage.lcov
          
      - name: coveralls parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          flag-name: test_${{matrix.os}}_${{matrix.python-version}}
          parallel: true
          path-to-lcov: coverage.lcov
  
  finalize_tests:
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: coveralls finalize
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{secrets.github_token}}
          parallel-finished: true
          path-to-lcov: coverage.lcov
      
  report_coverage:
    if: ${{ always() }}
    needs: run_tests
    runs-on: ubuntu-latest
    
    env:
      COV: '0'
      OLDCOVER: '0'
    
    steps:  
      # gets the coverage of the latest release, as it was saved by releaser.yml
      - name: get latest coverage 
        uses: dawidd6/action-download-artifact@v2
        with:
          name: latest_coverage
          workflow: releaser.yml
      
      - name: set min coverage env
        run: | 
          echo "OLDCOVER=$(cat OLDCOVER.txt)" >> $GITHUB_ENV
          cat OLDCOVER.txt
          
      - name: extract coverage
        run: |
          coverage report -m > pytest-coverage.txt
          echo "COV=$(grep "TOTAL" coverage.txt | tr -s " " | cut -d" " -f4 | sed 's/%//')" >> $GITHUB_ENV
          echo $COV
          
      - name: report coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2
      
      - name: failed coverage
        if: ${{ env.COV < env.OLDCOV }}
        run: echo below last released coverage && exit 1
          
      
      
      
      
    
    
    
