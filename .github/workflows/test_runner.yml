name: test_runner
on: 
  pull_request: 
    branches: [main, dev]
  workflow_call:
  workflow_dispatch:
    
jobs:
  run_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9'] #, '3.10']
        
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: install dependencies
        run: | 
          python -m pip install --upgrade pip
          pip install pytest coveralls
          pip install -r requirements.txt
          
      - name: run tests
        run: |          
          coverage run --source=cvhero -m pytest cv_tests
          coverage lcov -o coverage.lcov
          coverage report -m > pytest-coverage.txt   
          
      - name: save coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: pytest-coverage.txt
          
      - name: coveralls parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          flag-name: test_${{matrix.os}}_${{matrix.python-version}}
          parallel: true
          path-to-lcov: coverage.lcov

  report_coverage:
    if: ${{ always() }}
    needs: run_tests
    runs-on: ubuntu-latest
    
    env:
      COV: '0'
    
    steps:  
      - uses: actions/checkout@v3
      
      - name: coveralls finalize
        id: coveralls_finalize
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{secrets.github_token}}
          parallel-finished: true
          path-to-lcov: coverage.lcov
      
      - name: get latest coverage 
        id: min_coverage
        uses: KJ002/read-yaml@1.6      
        with:
          file: .github/config_new_release.yml         
          key-path: '["_MIN_COVERAGE"]'
      
      - run: echo ${{ steps.min_coverage.outputs.data }}
      
      - name: get this coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage
          
      - name: extract coverage
        run: echo "COV=$(grep "TOTAL" pytest-coverage.txt | tr -s " " | cut -d" " -f4 | sed 's/%//')" >> $GITHUB_ENV
      
      - run: echo ${{ steps.coveralls_finalize.outputs.coveralls-api-result }}
      
      - run: | 
          echo ${{ job.coveralls_finalize.outputs.coveralls-api-result }} > tempcov.txt
          echo pytest-coverage.txt >> tempcov.txt && mv tempcov.txt pytest-coverage.txt
          cat pytest-coverage.txt
      
      - name: report coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2
            
      - name: coverage ${{ env.COV }} < ${{ steps.min_coverage.outputs.data }}
        if: ${{ env.COV < steps.min_coverage.outputs.data }}
        run: echo below last released coverage && exit 1
      
      - name: coverage ${{ env.COV }} > ${{ steps.min_coverage.outputs.data }}
        if: ${{ env.COV > steps.min_coverage.outputs.data }}
        run: echo above last released coverage && exit 0
      
          
      
      
      
      
    
    
    
